FROM public.ecr.aws/lambda/nodejs:18
LABEL org.opencontainers.image.authors="support@moviemasher.com"


COPY dev/image/sh ${LAMBDA_TASK_ROOT}/dev/image/sh 
COPY package.json ${LAMBDA_TASK_ROOT}/package.json

RUN sh ${LAMBDA_TASK_ROOT}/dev/image/sh/build-ffmpeg.sh

# COPY dev/image/sh/options.sh ${LAMBDA_TASK_ROOT}/dev/image/sh/options.sh 

# COPY dev/image/sh/aws/ ${LAMBDA_TASK_ROOT}/dev/image/sh/aws/ 
# RUN sh ${LAMBDA_TASK_ROOT}/dev/image/sh/aws/build.sh

# COPY dev/image/sh/tools/ ${LAMBDA_TASK_ROOT}/dev/image/sh/tools/ 
# RUN sh ${LAMBDA_TASK_ROOT}/dev/image/sh/tools/build.sh

# COPY dev/image/sh/avlibs/ ${LAMBDA_TASK_ROOT}/dev/image/sh/avlibs/  
# RUN sh ${LAMBDA_TASK_ROOT}/dev/image/sh/avlibs/build.sh

# COPY dev/image/sh/ffmpeg/ ${LAMBDA_TASK_ROOT}/dev/image/sh/ffmpeg/  
# RUN sh ${LAMBDA_TASK_ROOT}/dev/image/sh/ffmpeg/build.sh


# RUN sh ${LAMBDA_TASK_ROOT}/dev/image/sh/ffmpeg/clean.sh
# RUN sh ${LAMBDA_TASK_ROOT}/dev/image/sh/avlibs/clean.sh
# RUN sh ${LAMBDA_TASK_ROOT}/dev/image/sh/tools/clean.sh

# COPY dev/image/sh/clean.sh ${LAMBDA_TASK_ROOT}/dev/image/sh/clean.sh 
# RUN sh ${LAMBDA_TASK_ROOT}/dev/image/sh/clean.sh

# # Assumes your function is named "app.js", and there is a package.json file in the app directory 
# COPY workspaces/example-lambda/src/app.js workspaces/example-lambda/package.json ${LAMBDA_TASK_ROOT}/
# COPY packages/moviemasher.js ${LAMBDA_TASK_ROOT}/node_modules/@moviemasher/moviemasher.js
# COPY packages/server-core ${LAMBDA_TASK_ROOT}/node_modules/@moviemasher/server-core

# RUN npm install
COPY esm/lambda-ffmpeg.js ${LAMBDA_TASK_ROOT}/app.mjs

# Set the CMD to your handler (could also be done as a parameter override outside of the Dockerfile)
CMD [ "app.handler" ]


